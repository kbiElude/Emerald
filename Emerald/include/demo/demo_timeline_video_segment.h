/**
 *
 * Emerald (kbi/elude @2015)
 *
 */
#ifndef DEMO_TIMELINE_VIDEO_SEGMENT_H
#define DEMO_TIMELINE_VIDEO_SEGMENT_H

#include "demo/demo_types.h"
#include "ogl/ogl_types.h"          /* TODO: Remove OGL stuff */
#include "ral/ral_types.h"
#include "system/system_types.h"

typedef unsigned int demo_timeline_video_segment_input_id;
typedef unsigned int demo_timeline_video_segment_output_id;

/* IDs of call-backs used by demo_timeline_video_segment */
typedef enum
{
    /* Video segment about to be released.
     *
     * @param arg Source demo_timeline_video_segment instance
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_ABOUT_TO_RELEASE,

    /* Node could not render last frame - one or more inputs, which require an attached object, lack it.
     *
     * Asynchronous call-back highly recommended. This call-back will be made from the rendering thread,
     * so synchronous call-back handlers should not stall for too long.
     *
     * @param arg ID of the segment node input, for which the problem was found when rendering the frame.
     *            This call-back will be fired once per each faulty input per frame.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_INPUT_LACKS_ATTACHMENT,

    /* Node input is no longer exposed.
     *
     * @param arg Formerly exposed segment input ID
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_INPUT_NO_LONGER_EXPOSED,

    /* New node input has just been added.
     *
     * @param arg New exposed segment input ID
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_NEW_INPUT_EXPOSED,

    /* New video segment node was created.
     *
     * @param arg New segment node ID
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_NEW_NODE_CREATED,

    /* A new node A output->node B input connection was created.
     *
     * @param arg Source node, whose one of the outputs was connected to another node's input.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_NODE_INPUT_IS_NOW_CONNECTED,

    /* An existing node A output->node B input connection was deleted.
     *
     * @param arg Source node, whose one of the outputs was disconnected from the other node's input.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_NODE_INPUT_NO_LONGER_CONNECTED,

    /* Node output is no longer exposed.
     *
     * @param arg Formerly exposed segment output ID
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_OUTPUT_NO_LONGER_EXPOSED,

    /* New node output has just been added.
     *
     * @param arg New exposed segment output ID
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_NEW_OUTPUT_EXPOSED,

    /* Always last */
    DEMO_TIMELINE_VIDEO_SEGMENT_CALLBACK_ID_COUNT
} demo_timeline_video_segment_callback_id;

/** Properties of a video segment input */
typedef enum
{
    /* not settable; demo_timeline_segment_node_interface_type */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_INTERFACE_TYPE,

    /* not settable; bool
     *
     * Only valid for texture inputs.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_IS_ATTACHMENT_REQUIRED,

    /* not settable; system_hashed_ansi_string */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_NAME,

    /* not settable; ral_texture_format.
     *
     * Only valid for texture inputs.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_TEXTURE_FORMAT,

    /* not settable; uint32_t
     *
     * Only valid for texture inputs.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_TEXTURE_N_COMPONENTS,

    /* not settable; uint32_t
     *
     * Only valid for texture inputs.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_TEXTURE_N_LAYERS,

    /* not settable; uint32_t
     *
     * Only valid for texture inputs.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_TEXTURE_N_SAMPLES,

    /* not settable; ral_texture_type
     *
     * Only valid for texture inputs.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_INPUT_PROPERTY_TEXTURE_TYPE,
} demo_timeline_video_segment_input_property;

typedef enum
{
    /* settable, bool.
     *
     * When a video segment node input is exposed, it becomes visible to the postprocessing segment which owns
     * that video segments. This lets other video segment nodes read data generated by the video segment which
     * exposes the node input.
     *
     * Default value: false
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_NODE_INPUT_PROPERTY_EXPOSED,

    /* settable: demo_texture_attachment_declaration*
     *
     * Texture attachment bound to the node input.
     *
     * NOTE: This property can only be used against texture inputs. Any attempt to bind a texture attachment
     *       to non-texture video segment node inputs will result in an assertion failure.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_NODE_INPUT_PROPERTY_TEXTURE_ATTACHMENT,

} demo_timeline_video_segment_node_input_property;

typedef enum
{
    /* TODO. Not sure if we're going to need this in the short term? To be revisited */
//    DEMO_TIMELINE_VIDEO_SEGMENT_NODE_OUTPUT_PROPERTY_EXPOSED,

} demo_timeline_video_segment_node_output_property;

typedef enum
{
    /* not settable; demo_timeline_segment_node_interface_type */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_INTERFACE_TYPE,

    /* not settable; uint32_t */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_N_COMPONENTS,

    /* not settable; uint32_t */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_N_LAYERS,

    /* not settable; uint32_t */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_N_SAMPLES,

    /* not settable; uint32_t */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_N_START_LAYER_INDEX,

    /* not settable; ral_texture_component[DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_N_COMPONENTS] */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_TEXTURE_COMPONENTS,

    /* not settable; ral_texture_format */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_TEXTURE_FORMAT,

    /* not settable; ral_texture_type */
    DEMO_TIMELINE_VIDEO_SEGMENT_OUTPUT_PROPERTY_TEXTURE_TYPE,

} demo_timeline_video_segment_output_property;

typedef enum
{
    /* float; settable.
     *
     * Aspect ratio which should be used for the video segment.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_PROPERTY_ASPECT_RATIO,

    /* system_callback_manager; not settable.
     *
     * Callback manager instance which should be used to sign up for notifications.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_PROPERTY_CALLBACK_MANAGER,

    /* system_hashed_ansi_string; not settable.
     *
     * Name assigned to the video segment at creation time.
     */
    DEMO_TIMELINE_VIDEO_SEGMENT_PROPERTY_NAME,

    /* demo_timeline_segment_node; not settable.
     *
     * Output node instance. Should be used to extract result texture at post-processing phase.
     * Internal use only.
     **/
    DEMO_TIMELINE_VIDEO_SEGMENT_PROPERTY_OUTPUT_NODE,

    /* demo_timeline; not settable.
     *
     * Parent timeline instance.
     **/
    DEMO_TIMELINE_VIDEO_SEGMENT_PROPERTY_TIMELINE,

} demo_timeline_video_segment_property;



REFCOUNT_INSERT_DECLARATIONS(demo_timeline_video_segment,
                             demo_timeline_video_segment)


/** TODO
 *
 *  @param segment             TODO
 *  @param node_type           Type of the video segment node to create.
 *  @param name                TODO
 *  @param out_opt_node_id_ptr TODO
 *  @param out_opt_node_ptr    TODO
 *
 *  @return TODO
 **/
PUBLIC bool demo_timeline_video_segment_add_node(demo_timeline_video_segment           segment,
                                                 demo_timeline_video_segment_node_type node_type,
                                                 system_hashed_ansi_string             name,
                                                 demo_timeline_segment_node_id*        out_opt_node_id_ptr,
                                                 demo_timeline_segment_node*           out_opt_node_ptr);

/** Connects one node's output with another node's input.
 *
 *  @param segment            Timeline segment both source and destination nodes are in.
 *  @param src_node_id        Source node's ID
 *  @param src_node_output_id Source node's output ID
 *  @param dst_node_id        Destination node's ID
 *  @param dst_node_input_id  Destination node's input ID
 *
 *  @return true if the new connection was created successfully, false otherwise. Look at the console log
 *          for more details in case of any failures.
 **/
PUBLIC bool demo_timeline_video_segment_connect_nodes(demo_timeline_video_segment          segment,
                                                      demo_timeline_segment_node_id        src_node_id,
                                                      demo_timeline_segment_node_output_id src_node_output_id,
                                                      demo_timeline_segment_node_id        dst_node_id,
                                                      demo_timeline_segment_node_output_id dst_node_input_id);

/** Creates a new DAG video segment.
 *
 *  At creation time, the video segment:
 *  - does not define any dependencies or nodes.
 *  - does not define any set of passes or inputs.
 *  - defines a single output of texture type specified at creation time.
 *
 * The first two need to be added manually after the object is instantiated.
 *
 *  NOTE: This function should only be used by demo_timeline. Use the demo_timeline_add_video_segment()
 *        func to instantiate a video segment.
 *
 *  @param context               Rendering context
 *  @param pipeline              Rendering pipeline
 *  @param owner_timeline        Timeline instance which is going to control lifetime of the video segment.
 *  @param output_texture_format Texture format to use for the output node, to which the DAG will store texture data.
 *  @param name                  Name of the new video segment.
 *
 *  @return Requested instance.
 */
PUBLIC demo_timeline_video_segment demo_timeline_video_segment_create(ogl_context               context,
                                                                      ogl_pipeline              pipeline,
                                                                      demo_timeline             owner_timeline,
                                                                      ral_texture_format        output_texture_format,
                                                                      system_hashed_ansi_string name);

/** TODO */
PUBLIC bool demo_timeline_video_segment_delete_nodes(demo_timeline_video_segment          segment,
                                                     uint32_t                             n_nodes,
                                                     const demo_timeline_segment_node_id* node_ids);

/** TODO */
PUBLIC bool demo_timeline_video_segment_disconnect_nodes(demo_timeline_video_segment          segment,
                                                         demo_timeline_segment_node_id        src_node_id,
                                                         demo_timeline_segment_node_output_id src_node_output_id,
                                                         demo_timeline_segment_node_id        dst_node_id,
                                                         demo_timeline_segment_node_output_id dst_node_input_id);

/** TODO */
PUBLIC bool demo_timeline_video_segment_get_node_property(demo_timeline_video_segment   segment,
                                                          demo_timeline_segment_node_id node_id,
                                                          int                           property,
                                                          void*                         out_result_ptr);

/** TODO */
PUBLIC void demo_timeline_video_segment_get_property(demo_timeline_video_segment          segment,
                                                     demo_timeline_video_segment_property property,
                                                     void*                                out_result_ptr);

/** TODO */
PUBLIC EMERALD_API RENDERING_CONTEXT_CALL bool demo_timeline_video_segment_render(demo_timeline_video_segment segment,
                                                                                  uint32_t                    frame_index,
                                                                                  system_time                 rendering_pipeline_time,
                                                                                  const int*                  rendering_area_px_topdown);

/** TODO */
PUBLIC EMERALD_API bool demo_timeline_video_segment_set_node_input_property(demo_timeline_video_segment_node                node,
                                                                            demo_timeline_segment_node_input_id             input_id,
                                                                            demo_timeline_video_segment_node_input_property property,
                                                                            const void*                                     data);

/** TODO */
PUBLIC EMERALD_API bool demo_timeline_video_segment_set_node_output_property(demo_timeline_video_segment_node                 node,
                                                                             demo_timeline_segment_node_output_id             output_id,
                                                                             demo_timeline_video_segment_node_output_property property,
                                                                             const void*                                      data);

/** TODO */
PUBLIC void demo_timeline_video_segment_set_property(demo_timeline_video_segment          segment,
                                                     demo_timeline_video_segment_property property,
                                                     const void*                          data);

#endif /* DEMO_TIMELINE_VIDEO_SEGMENT_H */
