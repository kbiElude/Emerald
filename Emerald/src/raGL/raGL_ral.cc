/* */
#include "shared.h"
#include "ogl/ogl_types.h"
#include "ral/ral_types.h"
#include "raGL/raGL_ral.h"

/** Please see header for specification */
PUBLIC ogl_primitive_type raGL_get_ogl_primive_type_for_ral_primitive_type(ral_primitive_type in_primitive_type)
{
    static const ogl_primitive_type result_array[] =
    {
        OGL_PRIMITIVE_TYPE_LINE_LOOP,
        OGL_PRIMITIVE_TYPE_LINE_STRIP,
        OGL_PRIMITIVE_TYPE_LINE_STRIP_ADJACENCY,
        OGL_PRIMITIVE_TYPE_LINES,
        OGL_PRIMITIVE_TYPE_LINES_ADJACENCY,
        OGL_PRIMITIVE_TYPE_POINTS,
        OGL_PRIMITIVE_TYPE_TRIANGLE_FAN,
        OGL_PRIMITIVE_TYPE_TRIANGLE_STRIP,
        OGL_PRIMITIVE_TYPE_TRIANGLE_STRIP_ADJACENCY,
        OGL_PRIMITIVE_TYPE_TRIANGLES,
        OGL_PRIMITIVE_TYPE_TRIANGLES_ADJACENCY
    };

    ASSERT_DEBUG_SYNC(in_primitive_type < RAL_PRIMITIVE_TYPE_COUNT,
                      "RAL primitive type not supported for OpenGL back-end");

    return result_array[in_primitive_type];
}

/** Please see header for specification */
PUBLIC ogl_shader_type raGL_get_ogl_shader_type_for_ral_shader_type(ral_shader_type in_shader_type)
{
    static const ogl_shader_type result_array[] =
    {
        OGL_SHADER_TYPE_COMPUTE,
        OGL_SHADER_TYPE_FRAGMENT,
        OGL_SHADER_TYPE_GEOMETRY,
        OGL_SHADER_TYPE_TESSELLATION_CONTROL,
        OGL_SHADER_TYPE_TESSELLATION_EVALUATION,
        OGL_SHADER_TYPE_VERTEX
    };

    ASSERT_DEBUG_SYNC(in_shader_type < RAL_SHADER_TYPE_COUNT,
                      "RAL shader stage unsupported for OpenGL back-end");

    return result_array[in_shader_type];
}

/** Please see header for specification */
PUBLIC ogl_texture_internalformat raGL_get_ogl_texture_internalformat_for_ral_texture_format(ral_texture_format in_texture_format)
{
    static const ogl_texture_internalformat result_array[] =
    {
        OGL_TEXTURE_INTERNALFORMAT_GL_COMPRESSED_RED_RGTC1,
        OGL_TEXTURE_INTERNALFORMAT_GL_COMPRESSED_SIGNED_RED_RGTC1,
        OGL_TEXTURE_INTERNALFORMAT_GL_COMPRESSED_RG_RGTC2,
        OGL_TEXTURE_INTERNALFORMAT_GL_COMPRESSED_SIGNED_RG_RGTC2,
        OGL_TEXTURE_INTERNALFORMAT_GL_DEPTH_COMPONENT16,
        OGL_TEXTURE_INTERNALFORMAT_GL_DEPTH_COMPONENT24,
        OGL_TEXTURE_INTERNALFORMAT_GL_DEPTH_COMPONENT32F,
        OGL_TEXTURE_INTERNALFORMAT_GL_DEPTH_COMPONENT32,
        OGL_TEXTURE_INTERNALFORMAT_GL_DEPTH24_STENCIL8,
        OGL_TEXTURE_INTERNALFORMAT_GL_DEPTH32F_STENCIL8,
        OGL_TEXTURE_INTERNALFORMAT_GL_R11F_G11F_B10F,
        OGL_TEXTURE_INTERNALFORMAT_GL_R16F,
        OGL_TEXTURE_INTERNALFORMAT_GL_R16I,
        OGL_TEXTURE_INTERNALFORMAT_GL_R16_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_R16UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_R16,
        OGL_TEXTURE_INTERNALFORMAT_GL_R3_G3_B2,
        OGL_TEXTURE_INTERNALFORMAT_GL_R32F,
        OGL_TEXTURE_INTERNALFORMAT_GL_R32I,
        OGL_TEXTURE_INTERNALFORMAT_GL_R32UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_R8I,
        OGL_TEXTURE_INTERNALFORMAT_GL_R8_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_R8UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_R8,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG16F,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG16I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG16_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG16UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG16,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG32F,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG32I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG32UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG8,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG8I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG8_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_RG8UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB10,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB10_A2UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB10_A2,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB12,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB16F,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB16I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB16_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB16UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB16,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB32F,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB32I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB32UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB4,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB5,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB5_A1,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB8I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB8_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB8UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB8,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGB9_E5,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA12,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA16F,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA16I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA16_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA16UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA16,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA2,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA32F,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA32I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA32UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA4,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA8,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA8I,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA8_SNORM,
        OGL_TEXTURE_INTERNALFORMAT_GL_RGBA8UI,
        OGL_TEXTURE_INTERNALFORMAT_GL_SRGB8,
        OGL_TEXTURE_INTERNALFORMAT_GL_SRGB8_ALPHA8,
    };

    ASSERT_DEBUG_SYNC(in_texture_format < RAL_TEXTURE_FORMAT_COUNT,
                      "RAL texture format not supported by the GL back-ed");

    return result_array[in_texture_format];
}